name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          if [ "${{ matrix.platform }}" == "win" ]; then
            npm run dist:win
          elif [ "${{ matrix.platform }}" == "mac" ]; then
            npm run dist:mac
          elif [ "${{ matrix.platform }}" == "linux" ]; then
            npm run dist:linux
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.platform }}
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的 git 历史

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release-files
          # 复制所有构建产物到 release-files 目录
          find artifacts/ -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec cp {} release-files/ \;
          ls -la release-files/

      - name: Extract changelog from tag
        id: changelog
        run: |
          # 获取当前 tag 的完整信息
          TAG_MESSAGE=$(git tag -l --format='%(contents)' ${{ github.ref_name }})
          
          # 如果 tag 信息为空，尝试使用 git show 获取
          if [ -z "$TAG_MESSAGE" ]; then
            TAG_MESSAGE=$(git show ${{ github.ref_name }} --format=%B --no-patch)
          fi
          
          # 如果仍然为空，生成默认信息
          if [ -z "$TAG_MESSAGE" ]; then
            TAG_MESSAGE="Release ${{ github.ref_name }}"
          fi
          
          # 输出到 GitHub Actions 变量（处理多行文本）
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # 输出到控制台（用于调试）
          echo "Changelog content:"
          echo "$TAG_MESSAGE"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: VR Player ${{ github.ref_name }}
          body: |
            ## VR Player ${{ github.ref_name }}
            
            ### 📦 平台支持
            
            **Windows:**
            - 支持 Windows 10/11 (x64/x86)
            - 提供安装程序 (.exe) 和便携版 (.zip)
            
            **macOS:**
            - 支持 macOS 10.15+ (Intel/Apple Silicon)
            - 提供 DMG 安装包和 ZIP 便携版
            
            **Linux:**
            - 支持 64-bit Linux 发行版
            - 提供 AppImage、DEB 和 RPM 格式

            ### 🐛 问题反馈
            如果您在使用过程中遇到任何问题，请在 [Issues](../../issues) 页面反馈。
            
            ---
            
            ### 📝 更新日志
            
            ${{ steps.changelog.outputs.changelog }}
          files: release-files/*
          draft: false
          prerelease: false 